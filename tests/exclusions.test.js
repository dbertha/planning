// Tests pour les contraintes d'exclusion des familles
// Cr√©ons nos propres tokens de test

const API_BASE = 'http://localhost:3000';

// Fonction utilitaire pour appeler l'API
async function apiCall(endpoint, method = 'GET', body = null, headers = {}) {
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
      ...headers
    }
  };

  if (body) {
    options.body = typeof body === 'string' ? body : JSON.stringify(body);
  }

  const response = await fetch(`${API_BASE}${endpoint}`, options);
  
  if (!response.ok) {
    const error = await response.text();
    throw new Error(`HTTP ${response.status}: ${error}`);
  }

  return response.json();
}

export async function runExclusionsTests() {
  console.log('\nüö´ ========== TESTS DES EXCLUSIONS ==========');
  
  let testToken = null;
  let adminSessionToken = null;
  let testFamilleId = null;
  let testClasseId = null;
  let testSemaineId = null;
  let testExclusionId = null;

  try {
    // ========== 0. CR√âATION D'UN PLANNING DE TEST ==========
    console.log('\n0Ô∏è‚É£ Cr√©ation d\'un planning de test...');
    
    const planningResponse = await apiCall('/api/auth', 'POST', {
      action: 'create_planning',
      data: {
        name: 'Planning Test Exclusions',
        description: 'Planning pour tester les exclusions',
        adminPassword: 'admin123'
      }
    });
    
    testToken = planningResponse.token;
    adminSessionToken = planningResponse.adminSession;
    console.log(`‚úÖ Planning cr√©√© (Token: ${testToken.substring(0, 10)}...)`);

    // ========== 1. CR√âATION DES DONN√âES DE TEST ==========
    console.log('\n1Ô∏è‚É£ Cr√©ation des donn√©es de test...');
    
    // Cr√©er une famille de test
    const familleResponse = await apiCall('/api/familles', 'POST', {
      token: testToken,
      nom: 'Famille Test Exclusions',
      telephone: '0123456789',
      email: 'test.exclusions@example.com',
      nb_nettoyage: 3,
      classes_preferences: [],
      notes: 'Famille cr√©√©e pour tester les exclusions'
    }, {
      'X-Admin-Session': adminSessionToken
    });

    testFamilleId = familleResponse.id;
    console.log(`‚úÖ Famille de test cr√©√©e (ID: ${testFamilleId})`);

    // Cr√©er une classe de test
    const classeResponse = await apiCall('/api/planning', 'POST', {
      token: testToken,
      type: 'classe',
      data: {
        id: `TE${Date.now().toString().slice(-6)}`,
        nom: 'Classe Test Exclusions',
        couleur: '#FF6B6B',
        ordre: 99,
        description: 'Classe pour tester les exclusions'
      }
    }, {
      'X-Admin-Session': adminSessionToken
    });

    testClasseId = classeResponse.id;
    console.log(`‚úÖ Classe de test cr√©√©e (ID: ${testClasseId})`);

    // Cr√©er une semaine de test
    const today = new Date();
    const weekStart = new Date(today);
    weekStart.setDate(today.getDate() + 7); // Semaine prochaine
    const weekEnd = new Date(weekStart);
    weekEnd.setDate(weekStart.getDate() + 6);

    const semaineResponse = await apiCall('/api/planning', 'POST', {
      token: testToken,
      type: 'semaine',
      data: {
        id: `TE${Date.now().toString().slice(-6)}`,
        debut: weekStart.toISOString().split('T')[0],
        fin: weekEnd.toISOString().split('T')[0],
        type: 'normale',
        description: 'Semaine test exclusions',
        is_published: true
      }
    }, {
      'X-Admin-Session': adminSessionToken
    });

    testSemaineId = semaineResponse.id;
    console.log(`‚úÖ Semaine de test cr√©√©e (ID: ${testSemaineId})`);

    // ========== 2. TESTS D'AFFECTATION SANS EXCLUSION ==========
    console.log('\n2Ô∏è‚É£ Test d\'affectation normale (sans exclusion)...');
    
    const affectationSansExclusion = await apiCall('/api/planning', 'POST', {
      token: testToken,
      type: 'affectation',
      data: {
        familleId: testFamilleId,
        classeId: testClasseId,
        semaineId: testSemaineId
      }
    }, {
      'X-Admin-Session': adminSessionToken
    });

    console.log('‚úÖ Affectation cr√©√©e avec succ√®s sans exclusion');

    // Supprimer l'affectation pour les tests suivants
    await apiCall(`/api/planning/${affectationSansExclusion.id}`, 'DELETE', {
      token: testToken
    }, {
      'X-Admin-Session': adminSessionToken
    });

    console.log('‚úÖ Affectation supprim√©e pour nettoyer');

    // ========== 3. CR√âATION D'UNE EXCLUSION ==========
    console.log('\n3Ô∏è‚É£ Cr√©ation d\'une exclusion couvrant la semaine de test...');
    
    const exclusionStart = new Date(weekStart);
    exclusionStart.setDate(weekStart.getDate() - 1); // Commence 1 jour avant
    const exclusionEnd = new Date(weekEnd);
    exclusionEnd.setDate(weekEnd.getDate() + 1); // Finit 1 jour apr√®s

    const exclusionResponse = await apiCall('/api/familles', 'POST', {
      token: testToken,
      action: 'add_exclusion',
      famille_id: testFamilleId,
      date_debut: exclusionStart.toISOString().split('T')[0],
      date_fin: exclusionEnd.toISOString().split('T')[0],
      type: 'vacances',
      notes: 'Test d\'exclusion automatique'
    }, {
      'X-Admin-Session': adminSessionToken
    });

    testExclusionId = exclusionResponse.id;
    console.log(`‚úÖ Exclusion cr√©√©e (ID: ${testExclusionId})`);

    // ========== 4. TEST D'AFFECTATION BLOQU√âE ==========
    console.log('\n4Ô∏è‚É£ Test d\'affectation bloqu√©e par exclusion...');
    
    try {
      await apiCall('/api/planning', 'POST', {
        token: testToken,
        type: 'affectation',
        data: {
          familleId: testFamilleId,
          classeId: testClasseId,
          semaineId: testSemaineId
        }
      }, {
        'X-Admin-Session': adminSessionToken
      });

      console.log('‚ùå ERREUR : L\'affectation aurait d√ª √™tre bloqu√©e !');
      return false;
    } catch (error) {
      if (error.message.includes('contrainte d\'exclusion')) {
        console.log('‚úÖ Affectation correctement bloqu√©e par l\'exclusion');
      } else {
        console.log(`‚ùå Erreur inattendue : ${error.message}`);
        return false;
      }
    }

    // ========== 5. V√âRIFICATION DES FAMILLES DISPONIBLES ==========
    console.log('\n5Ô∏è‚É£ V√©rification des familles disponibles...');
    
    const famillesDisponibles = await apiCall(
      `/api/planning?token=${testToken}&type=available_families&classeId=${testClasseId}&semaineId=${testSemaineId}`,
      'GET'
    );

    const familleTestDisponible = famillesDisponibles.find(f => f.id === testFamilleId);
    
    if (familleTestDisponible) {
      console.log('‚ùå ERREUR : La famille avec exclusion ne devrait pas √™tre disponible !');
      return false;
    } else {
      console.log('‚úÖ Famille correctement exclue de la liste des disponibles');
    }

    // ========== 6. TEST DE R√âCUP√âRATION DES EXCLUSIONS ==========
    console.log('\n6Ô∏è‚É£ Test de r√©cup√©ration des exclusions...');
    
    const exclusions = await apiCall(
      `/api/familles?token=${testToken}&action=get_exclusions&famille_id=${testFamilleId}`,
      'GET'
    );

    if (exclusions.length === 1 && exclusions[0].id === testExclusionId) {
      console.log('‚úÖ Exclusions r√©cup√©r√©es correctement');
    } else {
      console.log(`‚ùå ERREUR : Exclusions incorrectes. Attendu: 1, re√ßu: ${exclusions.length}`);
      return false;
    }

    // ========== 7. TEST DE SUPPRESSION D'EXCLUSION ==========
    console.log('\n7Ô∏è‚É£ Test de suppression d\'exclusion...');
    
    await apiCall(`/api/familles/${testExclusionId}`, 'DELETE', {
      token: testToken,
      action: 'delete_exclusion'
    }, {
      'X-Admin-Session': adminSessionToken
    });

    console.log('‚úÖ Exclusion supprim√©e');

    // ========== 8. V√âRIFICATION APR√àS SUPPRESSION ==========
    console.log('\n8Ô∏è‚É£ V√©rification que l\'affectation est maintenant possible...');
    
    const affectationApres = await apiCall('/api/planning', 'POST', {
      token: testToken,
      type: 'affectation',
      data: {
        familleId: testFamilleId,
        classeId: testClasseId,
        semaineId: testSemaineId
      }
    }, {
      'X-Admin-Session': adminSessionToken
    });

    console.log('‚úÖ Affectation cr√©√©e avec succ√®s apr√®s suppression de l\'exclusion');

    // ========== 9. NETTOYAGE ==========
    console.log('\n9Ô∏è‚É£ Nettoyage des donn√©es de test...');
    
    // Supprimer l'affectation
    await apiCall(`/api/planning/${affectationApres.id}`, 'DELETE', {
      token: testToken
    }, {
      'X-Admin-Session': adminSessionToken
    });

    // Supprimer la famille
    await apiCall(`/api/familles/${testFamilleId}`, 'DELETE', {
      token: testToken
    }, {
      'X-Admin-Session': adminSessionToken
    });

    console.log('‚úÖ Donn√©es de test nettoy√©es');

    console.log('\nüéâ ========== TOUS LES TESTS D\'EXCLUSIONS R√âUSSIS ==========');
    return true;

  } catch (error) {
    console.error(`‚ùå Erreur dans les tests d'exclusions : ${error.message}`);
    
    // Nettoyage en cas d'erreur
    try {
      if (testExclusionId) {
        await apiCall(`/api/familles/${testExclusionId}`, 'DELETE', {
          token: testToken,
          action: 'delete_exclusion'
        }, {
          'X-Admin-Session': adminSessionToken
        });
      }
      if (testFamilleId) {
        await apiCall(`/api/familles/${testFamilleId}`, 'DELETE', {
          token: testToken
        }, {
          'X-Admin-Session': adminSessionToken
        });
      }
    } catch (cleanupError) {
      console.error('Erreur de nettoyage:', cleanupError.message);
    }
    
    return false;
  }
}

